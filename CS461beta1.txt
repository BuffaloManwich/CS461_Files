import pandas as pd

class Vertex:
    def __init__(self, vertex_id, latitude, longitude):
        self.id = vertex_id.replace("_", " ")  # Replace underscores with spaces (from ChatGPT)
        # Lat and Long were added by me
        self.latitude = latitude
        self.longitude = longitude
        self.neighbors = []


    def add_neighbor(self, neighbor):
        if neighbor not in self.neighbors:
            self.neighbors.append(neighbor)


class Graph:
    def __init__(self):
        self.vertices = {}


    def add_vertex(self, vertex):
        if isinstance(vertex, Vertex) and vertex.id not in self.vertices:
            self.vertices[vertex.id] = vertex
            return True
        else:
            return False


    def add_edge(self, v1, v2):
        # Replace underscores with spaces before adding the edge
        v1 = v1.replace("_", " ")
        v2 = v2.replace("_", " ")
        if v1 in self.vertices and v2 in self.vertices:
            self.vertices[v1].add_neighbor(v2)
            self.vertices[v2].add_neighbor(v1)
            return True
        else:
            return False


    def get_vertices(self):
        return self.vertices.keys()


    def __iter__(self):
        return iter(self.vertices.values())

# Exit commands list
exits = ["Quit", "quit", "QUIT", "Exit", "exit", "EXIT"]

# User input and verification
def get_check_input():
  city_in = input()
  city = input_check(city_in)
  return city

def input_check(city): # modded with assist from ChatGPT
  if city in exits:
    return "Exit"
  else: 
    while city not in city_coor_list['city_name'].values:
      print("Invalid city.\n")
      city = input("Enter city name: ")
      if city in exits:
        return "Exit"
    return city

city_coor_list = pd.read_csv('coordinates.csv')
print(city_coor_list.shape)
city_coor_list.head()

# Now I need to iterate through the dataframe object and create 
# vertex class objects for each city in the graph
graph = Graph()
for index, row in city_coor_list.iterrows():
  vertex = Vertex(row['city_name'],row['latitude'],row['longitude'])  
  graph.add_vertex(vertex)

# Now I need to import the edge pairs from the .txt file and 
# add them as edges to the graph structure (from ChatGPT)

# Load adjacency pairs from text file
with open('Adjacencies.txt', 'r') as file:
    adjacency_data = file.readlines()

# Add edges based on adjacency list
for line in adjacency_data:
    cities = line.strip().split()
    if len(cities) == 2:
        city1, city2 = cities
        graph.add_edge(city1, city2)

# Example: print vertices and their neighbors
for vertex in graph:
    print(f"City: {vertex.id}; Coordinates: {vertex.latitude},{vertex.longitude}; Neighbors: {vertex.neighbors}")


farewell = False
print("Enter the name of the starting city:\n" + "\ttype Quit to exit:\n")
city_1 = get_check_input()
if city_1 == "Exit":
  print("Goodbye")
  farewell = True
else:
  print("You're starting at the city of " + city_1)


if farewell == False:
  print("Enter the name of the ending city:\n" + "\ttype Quit to exit:\n")
  city_2 = get_check_input()
  if city_2 == "Exit":
    print("Goodbye")
  else: print("You're ending at the city of " + city_2)